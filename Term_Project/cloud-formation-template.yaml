AWSTemplateFormatVersion: "2010-09-09"

Parameters: 
  ApiName:
    Type: String
    Description: Name of the HTTP API

Resources:
  GroceryDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GroceryData
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: grocery_id
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: grocery_id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  UserDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserData
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5  

  GrocerySNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: 'GroceryTopic'
      TopicName: 'GroceryTopic'

  GroceryAddLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GroceryAdd
      Handler: index.handler 
      Role: arn:aws:iam::579043522960:role/LabRole 
      Runtime: nodejs20.x  
      Timeout: 60  
      Code:
        S3Bucket: code-b00934576
        S3Key: grocery-add.zip 

  GroceryAddLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GroceryAddLambda.Arn
      Principal: apigateway.amazonaws.com 

  GroceryGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GroceryGet
      Handler: index.handler
      Role: arn:aws:iam::579043522960:role/LabRole
      Runtime: nodejs20.x
      Timeout: 60
      Code: 
        S3Bucket: code-b00934576
        S3Key: grocery-get.zip
  
  GroceryGetLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GroceryGetLambda.Arn
      Principal: apigateway.amazonaws.com 
        
  GroceryEditLambda:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: GroceryEdit
      Handler: index.handler
      Role: arn:aws:iam::579043522960:role/LabRole
      Runtime: nodejs20.x
      Timeout: 60
      Code: 
        S3Bucket: code-b00934576
        S3Key: grocery-edit.zip

  GroceryEditLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GroceryEditLambda.Arn
      Principal: apigateway.amazonaws.com 

  GroceryDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GroceryDelete
      Handler: index.handler
      Role: arn:aws:iam::579043522960:role/LabRole
      Runtime: nodejs20.x
      Timeout: 60
      Code:
        S3Bucket: code-b00934576
        S3Key: grocery-delete.zip

  GroceryDeleteLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GroceryDeleteLambda.Arn
      Principal: apigateway.amazonaws.com 

  UserAddLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UserAdd
      Handler: index.handler 
      Role: arn:aws:iam::579043522960:role/LabRole 
      Runtime: nodejs20.x  
      Timeout: 60  
      Code:
        S3Bucket: code-b00934576
        S3Key: user-add.zip  
  
  UserAddLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UserAddLambda.Arn
      Principal: apigateway.amazonaws.com

  UserGetByEmailLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UserGetByEmail
      Handler: index.handler
      Role: arn:aws:iam::579043522960:role/LabRole
      Runtime: nodejs20.x
      Timeout: 60
      Code: 
        S3Bucket: code-b00934576
        S3Key: user-get-by-email.zip

  UserGetByEmailLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UserGetByEmailLambda.Arn
      Principal: apigateway.amazonaws.com

  UserDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UserDelete
      Handler: index.handler
      Role: arn:aws:iam::579043522960:role/LabRole
      Runtime: nodejs20.x
      Timeout: 60
      Code:
        S3Bucket: code-b00934576
        S3Key: user-delete.zip
  
  UserDeleteLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UserDeleteLambda.Arn
      Principal: apigateway.amazonaws.com

  ExpiryReminderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ExpiryReminder
      Handler: index.handler
      Role: arn:aws:iam::579043522960:role/LabRole
      Runtime: nodejs20.x
      Timeout: 60
      Environment:
        Variables:
          sns: !Ref GrocerySNSTopic
      Code: 
        S3Bucket: code-b00934576
        S3Key: expiry-reminder.zip

  ExpiryReminderLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ExpiryReminderLambda.Arn
      Principal: apigateway.amazonaws.com
  
  SubscribeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Subscribe
      Handler: index.handler
      Role: arn:aws:iam::579043522960:role/LabRole
      Runtime: nodejs20.x
      Timeout: 60
      Environment:
        Variables:
          sns: !Ref GrocerySNSTopic
      Code: 
        S3Bucket: code-b00934576
        S3Key: subscribe.zip

  SubscribeLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SubscribeLambda.Arn
      Principal: apigateway.amazonaws.com

  ProjectApi:
    Type: AWS::ApiGatewayV2::Api
    Properties: 
      Name: !Ref ApiName
      ProtocolType: HTTP
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        AllowHeaders:
          - '*'
        AllowOrigins:
          - '*'
        ExposeHeaders:
          - '*'

  DefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ProjectApi
      AutoDeploy: true
      StageName: default

  UserGetByEmailIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ProjectApi
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt UserGetByEmailLambda.Arn

  UserGetByEmailRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ProjectApi
      RouteKey: "GET /users/{email}"
      AuthorizationType: NONE
      Target: !Sub "integrations/${UserGetByEmailIntegration}"

  UserAddIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ProjectApi
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt UserAddLambda.Arn

  UserAddRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ProjectApi
      RouteKey: "PUT /users"
      AuthorizationType: NONE
      Target: !Sub "integrations/${UserAddIntegration}"

  UserDeleteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ProjectApi
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt UserDeleteLambda.Arn

  UserDeleteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref ProjectApi
      RouteKey: "DELETE /users/{email}"
      AuthorizationType: NONE
      Target: !Sub "integrations/${UserDeleteIntegration}"

  GroceryGetIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ProjectApi
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt GroceryGetLambda.Arn

  GroceryGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ProjectApi
      RouteKey: "GET /grocery/{email}"
      AuthorizationType: NONE
      Target: !Sub "integrations/${GroceryGetIntegration}"

  GroceryAddIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ProjectApi
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt GroceryAddLambda.Arn

  GroceryAddRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ProjectApi
      RouteKey: "POST /grocery"
      AuthorizationType: NONE
      Target: !Sub "integrations/${GroceryAddIntegration}"

  GroceryEditIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ProjectApi
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt GroceryEditLambda.Arn

  GroceryEditRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ProjectApi
      RouteKey: "PUT /grocery"
      AuthorizationType: NONE
      Target: !Sub "integrations/${GroceryEditIntegration}"

  GroceryDeleteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ProjectApi
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt GroceryDeleteLambda.Arn

  GroceryDeleteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ProjectApi
      RouteKey: "DELETE /grocery/{grocery_id}"
      AuthorizationType: NONE
      Target: !Sub "integrations/${GroceryDeleteIntegration}"

  ExpiryReminderIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ProjectApi
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt ExpiryReminderLambda.Arn

  ExpiryReminderRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ProjectApi
      RouteKey: "GET /expiry-reminder"
      AuthorizationType: NONE
      Target: !Sub "integrations/${ExpiryReminderIntegration}"

  SubscribeIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ProjectApi
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt SubscribeLambda.Arn

  SubscribeRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ProjectApi
      RouteKey: "POST /subscribe"
      AuthorizationType: NONE
      Target: !Sub "integrations/${SubscribeIntegration}"

  DailyTriggerEventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: 'daily-timer'
      Description: 'Trigger Lambda once every day'
      ScheduleExpression: 'rate(1 day)'
      State: 'ENABLED'
      Targets: 
        - Arn: !GetAtt ExpiryReminderLambda.Arn
          Id: 'first'

  FiveMinutesTriggerEventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: 'five-minutes-timer'
      Description: 'Trigger Lambda once every day'
      ScheduleExpression: 'rate(5 minutes)'
      State: 'ENABLED'
      Targets: 
        - Arn: !GetAtt ExpiryReminderLambda.Arn
          Id: 'second'

  securitygroupec2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Grocery EC2"
      GroupName: ec2securitygroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  groceryec2:
    Type: AWS::EC2::Instance
    DependsOn:
      - grocerygateway
    Properties:
      ImageId: ami-053b0d53c279acc90
      InstanceType: t2.micro
      KeyName: vockey
      SecurityGroups:
        - !Ref securitygroupec2
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
          sudo yum install git -y
          git clone https://github.com/dev-patel2104/GroceryList.git
          cd GroceryList/Term_Project/frontend
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
          . ~/.nvm/nvm.sh
          nvm install --lts
          sudo yum install awscli -y
          sudo yum install jq -y
          aws configure set aws_access_key_id ASIAYNUNO7GIBSM5FCHC
          aws configure set aws_secret_access_key YAHiMCQfsR1fIKx738uuldXZCp+Cn6DN/v6BuTnC
          aws configure set aws_session_token FwoGZXIvYXdzEFQaDEyon+JKsaOyyRcDRiLAAc0nnoDKyiNtzzfxQcBFfnX60Kyuw0n50fjaKggAn0OaG/Nyj7vRlPNYGH8FMxpntdViEji111RPnQ+eWix+pQk2rORYKlyMX8h9kYRwCLxaofBs4B1E8JxdTiJynN81Pw/H1atKUG8vK0Vsvn7ytDe7L0XZYcYgV0rM8BI9VTSpsXzuTKDjwf1rmlP6LiHgs2GuAdYdYqxiGFb9m/r+JWbNWlEjuuD6WUGpz6LW6O/J4Xsiurh3eVt3hXregO5MGyj794+rBjIt3eNTV5ARGC8U/9ACkXW8oXZgxUSpAmKs3SzEt99RnyV2R0b4fiED8CBWdLFX
          aws configure set region us-east-1
          gatewayid=$(aws apigateway get-rest-apis | jq -r '.items[] | select(.name=="ProjectApi") | .id')
          REACT_APP_API_GATEWAY_URL="REACT_APP_API_GATEWAY_URL=https://${gatewayid}.execute-api.us-east-1.amazonaws.com/default"
          echo $REACT_APP_API_GATEWAY_URL >> .env
          npm install
          npm start